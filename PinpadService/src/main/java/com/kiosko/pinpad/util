package com.kiosko.pinpad.util;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class LibraryInspector {
    
    public static void main(String[] args) {
        try {
            System.out.println("üîç INSPECCIONANDO LIBRER√çA DATAFAST jDF_PinPad.jar");
            System.out.println("==================================================");
            
            // ‚úÖ INSPECCIONAR CLASE RespuestaProcesoPago
            System.out.println("\n=== üìã INSPECCI√ìN DE RespuestaProcesoPago ===");
            Class<?> respuestaClass = Class.forName("DF.RespuestaProcesoPago");
            
            System.out.println("\nüìã CAMPOS P√öBLICOS:");
            Field[] fields = respuestaClass.getFields();
            for (Field field : fields) {
                System.out.println("  " + field.getType().getSimpleName() + " " + field.getName());
            }
            
            System.out.println("\nüîß M√âTODOS P√öBLICOS (getters/setters):");
            Method[] methods = respuestaClass.getMethods();
            for (Method method : methods) {
                if (method.getName().startsWith("get") || method.getName().startsWith("set")) {
                    System.out.println("  " + method.getName() + "() -> " + method.getReturnType().getSimpleName());
                }
            }
            
            // ‚úÖ INSPECCIONAR CLASE EnvioProcesoPago
            System.out.println("\n=== üì§ INSPECCI√ìN DE EnvioProcesoPago ===");
            Class<?> envioClass = Class.forName("DF.EnvioProcesoPago");
            
            System.out.println("\nüìã CAMPOS P√öBLICOS:");
            Field[] envioFields = envioClass.getFields();
            for (Field field : envioFields) {
                System.out.println("  " + field.getType().getSimpleName() + " " + field.getName());
            }
            
            // ‚úÖ INSPECCIONAR CLASE LAN
            System.out.println("\n=== üåê INSPECCI√ìN DE LAN ===");
            Class<?> lanClass = Class.forName("DF.LAN");
            
            System.out.println("\nüîß M√âTODOS PRINCIPALES:");
            Method[] lanMethods = lanClass.getMethods();
            for (Method method : lanMethods) {
                String name = method.getName();
                if (!name.startsWith("get") && !name.startsWith("set") 
                    && !name.equals("toString") && !name.equals("hashCode")
                    && !name.equals("equals") && !name.equals("getClass")
                    && !name.equals("notify") && !name.equals("notifyAll")
                    && !name.equals("wait") && !name.equals("clone")) {
                    System.out.println("  " + name + "(" + method.getParameterCount() + " par√°metros)");
                }
            }
            
            // ‚úÖ INSPECCIONAR CLASE LANConfig
            System.out.println("\n=== ‚öôÔ∏è INSPECCI√ìN DE LANConfig ===");
            try {
                Class<?> configClass = Class.forName("DF.LANConfig");
                System.out.println("\nüìã CAMPOS P√öBLICOS:");
                Field[] configFields = configClass.getFields();
                for (Field field : configFields) {
                    System.out.println("  " + field.getType().getSimpleName() + " " + field.getName());
                }
                
                System.out.println("\nüèóÔ∏è CONSTRUCTORES:");
                java.lang.reflect.Constructor<?>[] constructors = configClass.getConstructors();
                for (java.lang.reflect.Constructor<?> constructor : constructors) {
                    System.out.println("  LANConfig(" + constructor.getParameterCount() + " par√°metros)");
                }
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è LANConfig no encontrada o no accesible");
            }
            
            // ‚úÖ INSPECCIONAR OTRAS CLASES DE RESPUESTA
            String[] otrasClases = {
                "DF.RespuestaConsultaTarjeta",
                "DF.RespuestaLecturaTarjeta", 
                "DF.RespuestaProcesoControl"
            };
            
            for (String nombreClase : otrasClases) {
                try {
                    System.out.println("\n=== üì± INSPECCI√ìN DE " + nombreClase.replace("DF.", "") + " ===");
                    Class<?> claseOtra = Class.forName(nombreClase);
                    
                    System.out.println("\nüìã CAMPOS P√öBLICOS:");
                    Field[] otrosFields = claseOtra.getFields();
                    for (Field field : otrosFields) {
                        System.out.println("  " + field.getType().getSimpleName() + " " + field.getName());
                    }
                } catch (Exception e) {
                    System.out.println("‚ö†Ô∏è " + nombreClase + " no encontrada");
                }
            }
            
            System.out.println("\n‚úÖ INSPECCI√ìN COMPLETADA");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error inspeccionando librer√≠a: " + e.getMessage());
            e.printStackTrace();
        }
    }
}