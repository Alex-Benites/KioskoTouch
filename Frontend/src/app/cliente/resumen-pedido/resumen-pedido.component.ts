import { Component, OnInit, OnDestroy, inject, Renderer2 } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { PedidoService } from '../../services/pedido.service';
import { CatalogoService } from '../../services/catalogo.service';
import { PublicidadSectionComponent } from '../../shared/publicidad-section/publicidad-section.component';
// ‚úÖ AGREGAR: Imports para el di√°logo
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { ConfirmationDialogComponent } from '../../shared/confirmation-dialog/confirmation-dialog.component';

@Component({
  selector: 'app-resumen-pedido',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    PublicidadSectionComponent,
    MatDialogModule // ‚úÖ AGREGAR
  ],
  templateUrl: './resumen-pedido.component.html',
  styleUrl: './resumen-pedido.component.scss'
})
export class ResumenPedidoComponent implements OnInit, OnDestroy {

  // ‚úÖ Inject de servicios existentes
  private router = inject(Router);
  private renderer = inject(Renderer2);
  private pedidoService = inject(PedidoService);
  private catalogoService = inject(CatalogoService);
  // ‚úÖ AGREGAR: Inject del di√°logo
  private dialog = inject(MatDialog);

  // ‚úÖ Propiedades para el template
  private productosInfo: Map<number, any> = new Map();

  // ‚úÖ Propiedades existentes
  metodoPagoSeleccionado: 'tarjeta' | 'efectivo' | null = null;
  mostrarDatosFacturacion: boolean = false;

  // ‚úÖ NUEVO: Datos de facturaci√≥n
  datosFacturacion = {
    nombreCompleto: '',
    cedula: '',
    telefono: '',
    correo: ''
  };

  // ‚úÖ Getters para el template
  get productosCarrito(): any[] {
    return this.pedidoService.obtenerProductosParaCarrito();
  }

  get cantidadProductos(): number {
    return this.productosCarrito.length;
  }

  get totalPedido(): number {
    return this.pedidoService.total();
  }

  get cantidadItems(): number {
    return this.pedidoService.cantidadItems();
  }

  // ‚úÖ NUEVO: Getter para obtener el turno
  get numeroTurno(): string | null {
    return this.pedidoService.obtenerTurno()?.toString() || null;
  }

  // ‚úÖ NUEVO: Verificar si tiene turno
  get tieneTurno(): boolean {
    return this.pedidoService.tieneTurno();
  }

  ngOnInit(): void {
    this.renderer.addClass(document.body, 'fondo-home');
    this.cargarInformacionProductos();

    console.log('üìã ResumenPedidoComponent inicializado');
    console.log('üìã Productos del pedido:', this.productosCarrito);
    console.log('üí∞ Total del pedido:', this.totalPedido);
    console.log('üî¢ Cantidad items:', this.cantidadItems);
    console.log('üé´ N√∫mero de turno:', this.numeroTurno); // ‚úÖ NUEVO
  }

  ngOnDestroy(): void {
    this.renderer.removeClass(document.body, 'fondo-home');
  }

  // ‚úÖ Cargar informaci√≥n de productos
  private cargarInformacionProductos(): void {
    const productos = this.productosCarrito;
    const idsUnicos = [...new Set(productos.map(p => p.producto_id || p.menu_id).filter(id => id))];

    console.log('üì• Cargando informaci√≥n de productos:', idsUnicos);

    idsUnicos.forEach(id => {
      const numeroId = Number(id);

      if (numeroId && !this.productosInfo.has(numeroId)) {
        console.log(`üîç Cargando producto ID: ${numeroId}`);

        this.catalogoService.obtenerProductoPorId(numeroId).subscribe({
          next: (producto) => {
            console.log(`‚úÖ Informaci√≥n cargada para producto ${numeroId}:`, producto);
            this.productosInfo.set(numeroId, producto);
          },
          error: (error) => {
            console.error(`‚ùå Error cargando producto ${numeroId}:`, error);
            this.productosInfo.set(numeroId, {
              nombre: `Producto ${numeroId}`,
              imagen_url: null
            });
          }
        });
      }
    });
  }

  // ‚úÖ Obtener nombre del producto
  obtenerNombreProducto(item: any): string {
    const id = item.producto_id || item.menu_id;
    const productoInfo = this.productosInfo.get(id);

    if (productoInfo && productoInfo.nombre) {
      return productoInfo.nombre;
    }

    return `Producto ${id}`;
  }

  // ‚úÖ Obtener imagen del producto
  obtenerImagenProducto(item: any): string | null {
    const id = item.producto_id || item.menu_id;
    const productoInfo = this.productosInfo.get(id);

    if (productoInfo && productoInfo.imagen_url) {
      return this.catalogoService.getFullImageUrl(productoInfo.imagen_url);
    }

    return null;
  }

  // ‚úÖ Verificar si tiene personalizaciones
  tienePersonalizaciones(item: any): boolean {
    return item.personalizacion && item.personalizacion.length > 0;
  }

  // ‚úÖ Obtener ingredientes agregados
  obtenerIngredientesAgregados(item: any): any[] {
    if (!this.tienePersonalizaciones(item)) return [];

    return item.personalizacion.filter((p: any) => p.accion === 'agregar');
  }

  // ‚úÖ Obtener ingredientes removidos
  obtenerIngredientesRemovidos(item: any): any[] {
    if (!this.tienePersonalizaciones(item)) return [];

    return item.personalizacion.filter((p: any) => p.accion === 'quitar');
  }

  // ‚úÖ Obtener ingrediente por ID
  obtenerIngredientePorId(ingredienteId: number): any {
    // Implementar l√≥gica para obtener nombre del ingrediente
    return { nombre: `Ingrediente ${ingredienteId}` };
  }

  // ‚úÖ AGREGAR: M√©todo faltante - irAlMenu
  irAlMenu(): void {
    console.log('üè† Navegando al men√∫ principal...');
    this.router.navigate(['/cliente/menu']);
  }

  // ‚úÖ AGREGAR: M√©todo para manejar publicidad
  onPublicidadCambio(publicidad: any): void {
    console.log('üì¢ Publicidad cambiada:', publicidad);
  }

  // ‚úÖ AGREGAR: Calcular subtotal
  calcularSubtotal(): number {
    return this.totalPedido / 1.15; // Quitar el 15% de IVA
  }

  // ‚úÖ AGREGAR: Calcular IVA
  calcularIVA(): number {
    return this.calcularSubtotal() * 0.15;
  }

  // ‚úÖ AGREGAR: Seleccionar m√©todo de pago
  seleccionarMetodoPago(metodo: 'tarjeta' | 'efectivo'): void {
    this.metodoPagoSeleccionado = metodo;
    console.log('üí≥ M√©todo de pago seleccionado:', metodo);
  }

  // ‚úÖ AGREGAR: Toggle datos de facturaci√≥n
  toggleDatosFacturacion(): void {
    this.mostrarDatosFacturacion = !this.mostrarDatosFacturacion;
  }

  // ‚úÖ NUEVO: Cancelar pedido completamente (limpiar carrito)
  cancelarPedido(): void {
    console.log('üóëÔ∏è Solicitando confirmaci√≥n para cancelar pedido completo...');

    // ‚úÖ NUEVO: Abrir di√°logo de confirmaci√≥n
    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {
      width: '450px',
      disableClose: false,
      panelClass: 'confirmation-dialog-panel',
      data: {
        itemType: 'PEDIDO COMPLETO',
        action: 'delete',
        context: 'pedido' // ‚úÖ Contexto espec√≠fico para pedido
      }
    });

    // ‚úÖ NUEVO: Manejar la respuesta del di√°logo
    dialogRef.afterClosed().subscribe(result => {
      console.log('üéØ Respuesta del di√°logo de cancelaci√≥n:', result);

      if (result === true) {
        // ‚úÖ Usuario confirm√≥ ‚Üí Cancelar pedido completo
        console.log('‚úÖ Confirmado: Cancelando pedido completo...');

        // ‚úÖ LIMPIAR completamente el carrito
        this.pedidoService.limpiarCarrito();

        console.log('üóëÔ∏è Carrito limpiado completamente');
        console.log('üè† Regresando al men√∫ principal...');

        // ‚úÖ Regresar al men√∫ principal
        this.router.navigate(['/cliente/menu']);

      } else {
        // ‚úÖ Usuario cancel√≥ ‚Üí No hacer nada
        console.log('‚ùå Cancelado: El pedido permanece activo');
      }
    });
  }

  // ‚úÖ NUEVO: Editar pedido (ir al carrito para modificar)
  editarPedido(): void {
    console.log('‚úèÔ∏è Editando pedido...');
    console.log('üîô Volviendo al carrito para modificar...');

    // ‚úÖ Regresar al carrito para editar
    this.router.navigate(['/cliente/carrito']);
  }

  // ‚úÖ MODIFICAR: Confirmar pedido con m√©todo de pago
  confirmarPedido(): void {
    if (!this.metodoPagoSeleccionado) {
      alert('Por favor selecciona un m√©todo de pago');
      return;
    }

    // ‚úÖ VALIDAR datos de facturaci√≥n si est√°n habilitados
    if (!this.validarDatosFacturacion()) {
      return;
    }

    console.log('‚úÖ Confirmando pedido...');
    console.log('üí≥ M√©todo de pago:', this.metodoPagoSeleccionado);
    console.log('üí∞ Total a cobrar:', this.totalPedido);

    // ‚úÖ PREPARAR queryParams con el MONTO REAL del carrito
    const queryParams: any = {
      tipo: this.metodoPagoSeleccionado,
      monto: this.totalPedido.toFixed(2), // ‚úÖ MONTO REAL DEL CARRITO
      orden: this.generarNumeroOrden(),
      productos: this.cantidadItems,
      subtotal: this.calcularSubtotal().toFixed(2),
      iva: this.calcularIVA().toFixed(2)
    };

    // ‚úÖ AGREGAR datos de turno si existe
    if (this.tieneTurno) {
      queryParams.turno = this.numeroTurno;
      console.log('üé´ Incluye turno:', this.numeroTurno);
    }

    // ‚úÖ AGREGAR datos de facturaci√≥n si est√°n completos
    if (this.mostrarDatosFacturacion) {
      queryParams.facturacion = JSON.stringify(this.datosFacturacion);
      console.log('üìÑ Datos de facturaci√≥n:', this.datosFacturacion);
    }

    console.log('üìã Enviando a InstruccionPago con par√°metros:', queryParams);

    // ‚úÖ NAVEGAR a instrucci√≥n de pago CON TODOS LOS DATOS
    this.router.navigate(['/cliente/instruccion-pago'], {
      queryParams
    });
  }

  // ‚úÖ AGREGAR: Generar n√∫mero de orden
  private generarNumeroOrden(): string {
    return Math.floor(Math.random() * 1000 + 1).toString().padStart(3, '0');
  }

  // ‚úÖ M√©todo para debug
  verificarDatos(): void {
    console.log('üîç VERIFICACI√ìN RESUMEN PEDIDO:');
    console.log('   - Productos:', this.productosCarrito);
    console.log('   - Cantidad productos:', this.cantidadProductos);
    console.log('   - Total pedido:', this.totalPedido);
    console.log('   - Cantidad items:', this.cantidadItems);
    console.log('   - Detalles raw:', this.pedidoService.detalles());
  }

  // ‚úÖ AGREGAR: M√©todo para validar datos de facturaci√≥n
  validarDatosFacturacion(): boolean {
    if (!this.mostrarDatosFacturacion) {
      return true; // Si no requiere facturaci√≥n, es v√°lido
    }

    const { nombreCompleto, cedula, telefono, correo } = this.datosFacturacion;

    if (!nombreCompleto.trim() || !cedula.trim() || !telefono.trim() || !correo.trim()) {
      alert('Por favor completa todos los campos de facturaci√≥n');
      return false;
    }

    // Validaci√≥n b√°sica de email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(correo)) {
      alert('Por favor ingresa un correo electr√≥nico v√°lido');
      return false;
    }

    return true;
  }
}
